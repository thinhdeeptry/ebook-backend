# Docker Compose for E-Learning Backend
# Includes PostgreSQL database, Redis cache, and NestJS application

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: elearning-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ebook_reader
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password_2024
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elearning-network

  # Redis Cache (optional - for session storage, caching)
  redis:
    image: redis:7-alpine
    container_name: elearning-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis_password_2024
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elearning-network

  # NestJS Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: elearning-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      # Database
      DATABASE_URL: "postgresql://postgres:postgres_password_2024@postgres:5432/ebook_reader?schema=public"
      
      # JWT
      JWT_SECRET: "elearning_jwt_secret_key_very_secure_2024"
      JWT_EXPIRATION: "7d"
      
      # App
      NODE_ENV: "production"
      PORT: 3001
      
      # CORS
      FRONTEND_URL: "http://localhost:3000"
      
      # File uploads
      MAX_FILE_SIZE: "50000000"  # 50MB
      
      # Redis (optional)
      REDIS_URL: "redis://:redis_password_2024@redis:6379"
    volumes:
      - uploads_data:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - elearning-network

  # Nginx Reverse Proxy (optional - for production)
  nginx:
    image: nginx:alpine
    container_name: elearning-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates if using HTTPS
    depends_on:
      - backend
    networks:
      - elearning-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

networks:
  elearning-network:
    driver: bridge