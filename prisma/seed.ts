import { PrismaClient, Role, ProgressStatus, PageBlockType } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function main() {
  console.log('üå± Starting database seeding for Vietnamese Elementary Education...');

  // Moral Education book images for Grade 1
  const moralEducationImageUrls = [
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-12.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-15.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-19.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-8.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-2.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-21.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-9.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-10.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-13.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-22.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-24.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-12.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-15.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-17.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-7.jpg&w=1920&q=75",
    "https://truonghocsoquocgia.nxbgd.vn/_next/image?url=https%3A%2F%2Fs3-dev.gkebooks.click%2Fbook%2F31732b0b-25b6-4ad6-9dee-d9a16eab757f%2Fdao-duc-1-14.jpg&w=1920&q=75"
  ];

  // Clear existing data (in development only)
  console.log('üßπ Cleaning existing data...');
  await prisma.trackingEvent.deleteMany();
  await prisma.quizAttempt.deleteMany();
  await prisma.studentProgress.deleteMany();
  await prisma.pageBlock.deleteMany();
  await prisma.page.deleteMany();
  await prisma.lesson.deleteMany();
  await prisma.chapter.deleteMany();
  await prisma.h5PContent.deleteMany();
  await prisma.book.deleteMany();
  await prisma.classMembership.deleteMany();
  await prisma.class.deleteMany();
  await prisma.h5PTemporaryFile.deleteMany();
  await prisma.h5PContentLibrary.deleteMany();
  await prisma.h5PLibrary.deleteMany();
  await prisma.user.deleteMany();

  // Create users
  console.log('üë• Creating users...');
  
  // Create admin user
  const adminPassword = await bcrypt.hash('admin123', 10);
  const admin = await prisma.user.create({
    data: {
      email: 'admin@truongtieuhoc.edu.vn',
      password: adminPassword,
      firstName: 'Qu·∫£n tr·ªã',
      lastName: 'H·ªá th·ªëng',
      role: Role.ADMIN,
      avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=admin',
    },
  });

  // Create teachers
  const teacherPassword = await bcrypt.hash('giaovien123', 10);
  const teachers = await Promise.all([
    prisma.user.create({
      data: {
        email: 'co.linh@truongtieuhoc.edu.vn',
        password: teacherPassword,
        firstName: 'Nguy·ªÖn Th·ªã',
        lastName: 'Linh',
        role: Role.TEACHER,
        avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=teacher1',
      },
    }),
    prisma.user.create({
      data: {
        email: 'thay.duc@truongtieuhoc.edu.vn',
        password: teacherPassword,
        firstName: 'Tr·∫ßn VƒÉn',
        lastName: 'ƒê·ª©c',
        role: Role.TEACHER,
        avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=teacher2',
      },
    }),
    prisma.user.create({
      data: {
        email: 'co.mai@truongtieuhoc.edu.vn',
        password: teacherPassword,
        firstName: 'Ph·∫°m Th·ªã',
        lastName: 'Mai',
        role: Role.TEACHER,
        avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=teacher3',
      },
    }),
    prisma.user.create({
      data: {
        email: 'thay.son@truongtieuhoc.edu.vn',
        password: teacherPassword,
        firstName: 'L√™ VƒÉn',
        lastName: 'S∆°n',
        role: Role.TEACHER,
        avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=teacher4',
      },
    }),
    prisma.user.create({
      data: {
        email: 'co.hoa@truongtieuhoc.edu.vn',
        password: teacherPassword,
        firstName: 'ƒê·ªó Th·ªã',
        lastName: 'Hoa',
        role: Role.TEACHER,
        avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=teacher5',
      },
    }),
  ]);

  // Create students for each grade (5 students per grade = 25 total students)
  const studentPassword = await bcrypt.hash('hocsinh123', 10);
  const allStudents = [];
  
  const studentNames = [
    // Grade 1 students
    { firstName: 'Nguy·ªÖn Minh', lastName: 'An', email: 'minh.an.1@hocsinh.edu.vn' },
    { firstName: 'Tr·∫ßn Th·ªã', lastName: 'B√¨nh', email: 'thi.binh.1@hocsinh.edu.vn' },
    { firstName: 'L√™ VƒÉn', lastName: 'C∆∞·ªùng', email: 'van.cuong.1@hocsinh.edu.vn' },
    { firstName: 'Ph·∫°m Th·ªã', lastName: 'Dung', email: 'thi.dung.1@hocsinh.edu.vn' },
    { firstName: 'Ho√†ng Minh', lastName: 'Em', email: 'minh.em.1@hocsinh.edu.vn' },
    
    // Grade 2 students
    { firstName: 'ƒê·ªó VƒÉn', lastName: 'Ph√°t', email: 'van.phat.2@hocsinh.edu.vn' },
    { firstName: 'Nguy·ªÖn Th·ªã', lastName: 'Giang', email: 'thi.giang.2@hocsinh.edu.vn' },
    { firstName: 'Tr·∫ßn Minh', lastName: 'H·∫£i', email: 'minh.hai.2@hocsinh.edu.vn' },
    { firstName: 'L√™ Th·ªã', lastName: 'Inh', email: 'thi.inh.2@hocsinh.edu.vn' },
    { firstName: 'Ph·∫°m VƒÉn', lastName: 'Kh√°nh', email: 'van.khanh.2@hocsinh.edu.vn' },
    
    // Grade 3 students
    { firstName: 'Ho√†ng Th·ªã', lastName: 'Lan', email: 'thi.lan.3@hocsinh.edu.vn' },
    { firstName: 'ƒê·ªó Minh', lastName: 'Minh', email: 'minh.minh.3@hocsinh.edu.vn' },
    { firstName: 'Nguy·ªÖn VƒÉn', lastName: 'Nam', email: 'van.nam.3@hocsinh.edu.vn' },
    { firstName: 'Tr·∫ßn Th·ªã', lastName: 'Oanh', email: 'thi.oanh.3@hocsinh.edu.vn' },
    { firstName: 'L√™ Minh', lastName: 'Ph√∫c', email: 'minh.phuc.3@hocsinh.edu.vn' },
    
    // Grade 4 students
    { firstName: 'Ph·∫°m Th·ªã', lastName: 'Qu·ª≥nh', email: 'thi.quynh.4@hocsinh.edu.vn' },
    { firstName: 'Ho√†ng VƒÉn', lastName: 'R·ªông', email: 'van.rong.4@hocsinh.edu.vn' },
    { firstName: 'ƒê·ªó Th·ªã', lastName: 'S√°ng', email: 'thi.sang.4@hocsinh.edu.vn' },
    { firstName: 'Nguy·ªÖn Minh', lastName: 'Tu·∫•n', email: 'minh.tuan.4@hocsinh.edu.vn' },
    { firstName: 'Tr·∫ßn Th·ªã', lastName: 'Uy√™n', email: 'thi.uyen.4@hocsinh.edu.vn' },
    
    // Grade 5 students
    { firstName: 'L√™ VƒÉn', lastName: 'Vi·ªát', email: 'van.viet.5@hocsinh.edu.vn' },
    { firstName: 'Ph·∫°m Th·ªã', lastName: 'Xu√¢n', email: 'thi.xuan.5@hocsinh.edu.vn' },
    { firstName: 'Ho√†ng Minh', lastName: 'Y√™n', email: 'minh.yen.5@hocsinh.edu.vn' },
    { firstName: 'ƒê·ªó VƒÉn', lastName: 'Zung', email: 'van.zung.5@hocsinh.edu.vn' },
    { firstName: 'Nguy·ªÖn Th·ªã', lastName: '√Ånh', email: 'thi.anh.5@hocsinh.edu.vn' },
  ];

  for (const studentData of studentNames) {
    const student = await prisma.user.create({
      data: {
        email: studentData.email,
        password: studentPassword,
        firstName: studentData.firstName,
        lastName: studentData.lastName,
        role: Role.STUDENT,
        avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${studentData.email}`,
      },
    });
    allStudents.push(student);
  }

  // Create Classes (L·ªõp 1-5)
  console.log('üè´ Creating classes for grades 1-5...');
  const classes = await Promise.all([
    prisma.class.create({
      data: {
        name: 'L·ªõp 1',
        gradeLevel: 1,
        description: 'L·ªõp h·ªçc d√†nh cho h·ªçc sinh 6-7 tu·ªïi, l√†m quen v·ªõi ch·ªØ c√°i v√† s·ªë ƒë·∫øm c∆° b·∫£n',
      },
    }),
    prisma.class.create({
      data: {
        name: 'L·ªõp 2',
        gradeLevel: 2,
        description: 'L·ªõp h·ªçc d√†nh cho h·ªçc sinh 7-8 tu·ªïi, ph√°t tri·ªÉn k·ªπ nƒÉng ƒë·ªçc vi·∫øt v√† t√≠nh to√°n',
      },
    }),
    prisma.class.create({
      data: {
        name: 'L·ªõp 3',
        gradeLevel: 3,
        description: 'L·ªõp h·ªçc d√†nh cho h·ªçc sinh 8-9 tu·ªïi, m·ªü r·ªông ki·∫øn th·ª©c v√† k·ªπ nƒÉng t∆∞ duy',
      },
    }),
    prisma.class.create({
      data: {
        name: 'L·ªõp 4',
        gradeLevel: 4,
        description: 'L·ªõp h·ªçc d√†nh cho h·ªçc sinh 9-10 tu·ªïi, c·ªßng c·ªë ki·∫øn th·ª©c n·ªÅn t·∫£ng',
      },
    }),
    prisma.class.create({
      data: {
        name: 'L·ªõp 5',
        gradeLevel: 5,
        description: 'L·ªõp h·ªçc d√†nh cho h·ªçc sinh 10-11 tu·ªïi, chu·∫©n b·ªã l√™n c·∫•p trung h·ªçc c∆° s·ªü',
      },
    }),
  ]);

  // Create Class Memberships (assign students to classes)
  console.log('üìù Creating class memberships...');
  const classMemberships = [];
  for (let i = 0; i < allStudents.length; i++) {
    const student = allStudents[i];
    const gradeIndex = Math.floor(i / 5); // 5 students per grade
    const classToJoin = classes[gradeIndex];
    
    const membership = await prisma.classMembership.create({
      data: {
        userId: student.id,
        classId: classToJoin.id,
      },
    });
    classMemberships.push(membership);
  }

  // Create H5P Libraries first
  console.log('üìö Creating H5P libraries...');
  const h5pLibraries = await Promise.all([
    prisma.h5PLibrary.create({
      data: {
        machineName: 'H5P.MultiChoice',
        majorVersion: 1,
        minorVersion: 16,
        patchVersion: 0,
        title: 'Multiple Choice',
        description: 'Create flexible multiple choice questions',
        author: 'Joubel',
        license: 'MIT',
        libraryJson: {
          title: 'Multiple Choice',
          machineName: 'H5P.MultiChoice',
          majorVersion: 1,
          minorVersion: 16,
          patchVersion: 0
        },
        semanticsJson: {
          name: 'question',
          type: 'text',
          label: 'Question'
        },
      },
    }),
    prisma.h5PLibrary.create({
      data: {
        machineName: 'H5P.QuestionSet',
        majorVersion: 1,
        minorVersion: 20,
        patchVersion: 0,
        title: 'Question Set',
        description: 'Create a sequence of various question types',
        author: 'Joubel',
        license: 'MIT',
        libraryJson: {
          title: 'Question Set',
          machineName: 'H5P.QuestionSet',
          majorVersion: 1,
          minorVersion: 20,
          patchVersion: 0
        },
        semanticsJson: {
          name: 'questions',
          type: 'list',
          label: 'Questions'
        },
      },
    }),
    prisma.h5PLibrary.create({
      data: {
        machineName: 'H5P.InteractiveVideo',
        majorVersion: 1,
        minorVersion: 26,
        patchVersion: 0,
        title: 'Interactive Video',
        description: 'Create videos enriched with interactions',
        author: 'Joubel',
        license: 'MIT',
        libraryJson: {
          title: 'Interactive Video',
          machineName: 'H5P.InteractiveVideo',
          majorVersion: 1,
          minorVersion: 26,
          patchVersion: 0
        },
        semanticsJson: {
          name: 'video',
          type: 'video',
          label: 'Video'
        },
      },
    }),
  ]);

  // Create H5P Content
  console.log('üéÆ Creating H5P interactive content...');
  const h5pContents = await Promise.all([
    // Grade 1 H5P Content
    prisma.h5PContent.create({
      data: {
        title: 'Nh·∫≠n bi·∫øt ch·ªØ c√°i A-M',
        library: 'H5P.MultiChoice',
        uploaderId: teachers[0].id,
        isPublic: true,
        params: {
          question: 'Ch·ªØ c√°i n√†o ƒë·ª©ng sau ch·ªØ B?',
          answers: [
            { text: 'C', correct: true, feedback: 'ƒê√∫ng r·ªìi! C ƒë·ª©ng sau B.' },
            { text: 'A', correct: false, feedback: 'A ƒë·ª©ng tr∆∞·ªõc B nh√©!' },
            { text: 'D', correct: false, feedback: 'D ƒë·ª©ng sau C nh√©!' }
          ]
        },
        metadata: {
          title: 'Nh·∫≠n bi·∫øt ch·ªØ c√°i A-M',
          language: 'vi',
          subject: 'Ti·∫øng Vi·ªát',
          grade: 1
        },
      },
    }),
    
    prisma.h5PContent.create({
      data: {
        title: 'ƒê·∫øm s·ªë t·ª´ 1 ƒë·∫øn 10',
        library: 'H5P.QuestionSet',
        uploaderId: teachers[1].id,
        isPublic: true,
        params: {
          questions: [
            {
              question: 'C√≥ bao nhi√™u qu·∫£ t√°o trong h√¨nh?',
              answers: [
                { text: '5', correct: true, feedback: 'ƒê√∫ng r·ªìi! C√≥ 5 qu·∫£ t√°o.' },
                { text: '4', correct: false, feedback: 'H√£y ƒë·∫øm l·∫°i nh√©!' },
                { text: '6', correct: false, feedback: 'H√£y ƒë·∫øm l·∫°i nh√©!' }
              ]
            }
          ]
        },
        metadata: {
          title: 'ƒê·∫øm s·ªë t·ª´ 1 ƒë·∫øn 10',
          language: 'vi',
          subject: 'To√°n',
          grade: 1
        },
      },
    }),

    // Grade 2 H5P Content
    prisma.h5PContent.create({
      data: {
        title: 'Ph√©p c·ªông trong ph·∫°m vi 20',
        library: 'H5P.QuestionSet',
        uploaderId: teachers[1].id,
        isPublic: true,
        params: {
          questions: [
            {
              question: 'T√≠nh: 12 + 5 = ?',
              answers: [
                { text: '17', correct: true, feedback: 'Ch√≠nh x√°c! 12 + 5 = 17' },
                { text: '16', correct: false, feedback: 'H√£y t√≠nh l·∫°i nh√©!' },
                { text: '18', correct: false, feedback: 'H√£y t√≠nh l·∫°i nh√©!' }
              ]
            }
          ]
        },
        metadata: {
          title: 'Ph√©p c·ªông trong ph·∫°m vi 20',
          language: 'vi',
          subject: 'To√°n',
          grade: 2
        },
      },
    }),

    // Grade 3 H5P Content
    prisma.h5PContent.create({
      data: {
        title: 'B·∫£ng c·ª≠u ch∆∞∆°ng 2 v√† 3',
        library: 'H5P.QuestionSet',
        uploaderId: teachers[1].id,
        isPublic: true,
        params: {
          questions: [
            {
              question: '3 x 4 = ?',
              answers: [
                { text: '12', correct: true, feedback: 'ƒê√∫ng r·ªìi! 3 x 4 = 12' },
                { text: '10', correct: false, feedback: 'H√£y nh·ªõ l·∫°i b·∫£ng c·ª≠u ch∆∞∆°ng 3 nh√©!' },
                { text: '14', correct: false, feedback: 'H√£y nh·ªõ l·∫°i b·∫£ng c·ª≠u ch∆∞∆°ng 3 nh√©!' }
              ]
            }
          ]
        },
        metadata: {
          title: 'B·∫£ng c·ª≠u ch∆∞∆°ng 2 v√† 3',
          language: 'vi',
          subject: 'To√°n',
          grade: 3
        },
      },
    }),

    // Grade 4 H5P Content
    prisma.h5PContent.create({
      data: {
        title: 'Ph√©p chia c√≥ d∆∞',
        library: 'H5P.QuestionSet',
        uploaderId: teachers[1].id,
        isPublic: true,
        params: {
          questions: [
            {
              question: '25 : 4 = ? (th∆∞∆°ng bao nhi√™u, d∆∞ bao nhi√™u?)',
              answers: [
                { text: 'Th∆∞∆°ng 6, d∆∞ 1', correct: true, feedback: 'Ch√≠nh x√°c! 25 : 4 = 6 d∆∞ 1' },
                { text: 'Th∆∞∆°ng 6, d∆∞ 2', correct: false, feedback: 'H√£y ki·ªÉm tra l·∫°i ph√©p t√≠nh!' },
                { text: 'Th∆∞∆°ng 5, d∆∞ 5', correct: false, feedback: 'H√£y ki·ªÉm tra l·∫°i ph√©p t√≠nh!' }
              ]
            }
          ]
        },
        metadata: {
          title: 'Ph√©p chia c√≥ d∆∞',
          language: 'vi',
          subject: 'To√°n',
          grade: 4
        },
      },
    }),

    // Grade 5 H5P Content
    prisma.h5PContent.create({
      data: {
        title: 'Ph√¢n s·ªë c∆° b·∫£n',
        library: 'H5P.QuestionSet',
        uploaderId: teachers[1].id,
        isPublic: true,
        params: {
          questions: [
            {
              question: 'Ph√¢n s·ªë 2/4 b·∫±ng ph√¢n s·ªë n√†o sau ƒë√¢y?',
              answers: [
                { text: '1/2', correct: true, feedback: 'ƒê√∫ng r·ªìi! 2/4 = 1/2' },
                { text: '3/6', correct: false, feedback: 'H√£y r√∫t g·ªçn ph√¢n s·ªë xem!' },
                { text: '4/8', correct: false, feedback: 'ƒê√¢y c≈©ng b·∫±ng 1/2, nh∆∞ng ch∆∞a ph·∫£i ƒë√°p √°n ƒë∆°n gi·∫£n nh·∫•t!' }
              ]
            }
          ]
        },
        metadata: {
          title: 'Ph√¢n s·ªë c∆° b·∫£n',
          language: 'vi',
          subject: 'To√°n',
          grade: 5
        },
      },
    }),
  ]);

  // Create Books for each grade and subject
  console.log('üìñ Creating books for each grade...');
  const books = [];
  
  for (let grade = 1; grade <= 5; grade++) {
    const gradeClass = classes[grade - 1];
    
    // Math book for each grade
    const mathBook = await prisma.book.create({
      data: {
        title: `S√°ch gi√°o khoa To√°n l·ªõp ${grade}`,
        subject: 'To√°n h·ªçc',
        grade: grade,
        description: `S√°ch gi√°o khoa To√°n h·ªçc d√†nh cho h·ªçc sinh l·ªõp ${grade}, ph√π h·ª£p v·ªõi ƒë·ªô tu·ªïi ${grade + 5}-${grade + 6}`,
        publisher: 'Nh√† xu·∫•t b·∫£n Gi√°o d·ª•c Vi·ªát Nam',
        isPublished: true,
        classes: {
          connect: [{ id: gradeClass.id }]
        }
      },
    });
    books.push(mathBook);

    // Vietnamese book for each grade
    const vietnameseBook = await prisma.book.create({
      data: {
        title: `S√°ch gi√°o khoa Ti·∫øng Vi·ªát l·ªõp ${grade}`,
        subject: 'Ti·∫øng Vi·ªát',
        grade: grade,
        description: `S√°ch gi√°o khoa Ti·∫øng Vi·ªát d√†nh cho h·ªçc sinh l·ªõp ${grade}, ph√°t tri·ªÉn k·ªπ nƒÉng ƒë·ªçc vi·∫øt`,
        publisher: 'Nh√† xu·∫•t b·∫£n Gi√°o d·ª•c Vi·ªát Nam',
        isPublished: true,
        classes: {
          connect: [{ id: gradeClass.id }]
        }
      },
    });
    books.push(vietnameseBook);

    // Science book for grades 3-5
    if (grade >= 3) {
      const scienceBook = await prisma.book.create({
        data: {
          title: `S√°ch gi√°o khoa Khoa h·ªçc l·ªõp ${grade}`,
          subject: 'Khoa h·ªçc t·ª± nhi√™n',
          grade: grade,
          description: `S√°ch gi√°o khoa Khoa h·ªçc t·ª± nhi√™n d√†nh cho h·ªçc sinh l·ªõp ${grade}`,
          publisher: 'Nh√† xu·∫•t b·∫£n Gi√°o d·ª•c Vi·ªát Nam',
          isPublished: true,
          classes: {
            connect: [{ id: gradeClass.id }]
          }
        },
      });
      books.push(scienceBook);
    }

    // Animal World book for grade 1 only
    if (grade === 1) {
      const animalWorldBook = await prisma.book.create({
        data: {
          title: `S√°ch gi√°o khoa Th·∫ø gi·ªõi ƒë·ªông v·∫≠t l·ªõp ${grade}`,
          subject: 'Th·∫ø gi·ªõi ƒë·ªông v·∫≠t',
          grade: grade,
          description: `Kh√°m ph√° th·∫ø gi·ªõi ƒë·ªông v·∫≠t ƒë·∫ßy m√†u s·∫Øc d√†nh cho h·ªçc sinh l·ªõp ${grade}, gi√∫p c√°c em l√†m quen v·ªõi c√°c lo√†i ƒë·ªông v·∫≠t quen thu·ªôc`,
          publisher: 'Nh√† xu·∫•t b·∫£n Gi√°o d·ª•c Vi·ªát Nam',
          isPublished: true,
          classes: {
            connect: [{ id: gradeClass.id }]
          }
        },
      });
      books.push(animalWorldBook);

      // Moral Education book for grade 1 only
      const moralEducationBook = await prisma.book.create({
        data: {
          title: `S√°ch gi√°o khoa ƒê·∫°o ƒë·ª©c l·ªõp ${grade}`,
          subject: 'ƒê·∫°o ƒë·ª©c',
          grade: grade,
          description: `S√°ch gi√°o khoa ƒê·∫°o ƒë·ª©c d√†nh cho h·ªçc sinh l·ªõp ${grade}, gi√∫p c√°c em h√¨nh th√†nh nh√¢n c√°ch v√† ph·∫©m ch·∫•t t·ªët ƒë·∫πp`,
          publisher: 'Nh√† xu·∫•t b·∫£n Gi√°o d·ª•c Vi·ªát Nam',
          isPublished: true,
          classes: {
            connect: [{ id: gradeClass.id }]
          }
        },
      });
      books.push(moralEducationBook);
    }
  }

  // Create Chapters and Lessons
  console.log('üìö Creating chapters and lessons...');
  const lessons = [];
  
  for (const book of books) {
    // Create chapters for each book
    const chapter1 = await prisma.chapter.create({
      data: {
        title: 'Ch∆∞∆°ng 1: Nh·ªØng ki·∫øn th·ª©c c∆° b·∫£n',
        order: 1,
        bookId: book.id,
        description: `Ch∆∞∆°ng ƒë·∫ßu ti√™n c·ªßa ${book.title}`
      }
    });

    const chapter2 = await prisma.chapter.create({
      data: {
        title: 'Ch∆∞∆°ng 2: N√¢ng cao k·ªπ nƒÉng',
        order: 2,
        bookId: book.id,
        description: `Ch∆∞∆°ng th·ª© hai c·ªßa ${book.title}`
      }
    });

    // Create lessons for each chapter
    if (book.subject === 'To√°n h·ªçc') {
      // Math lessons
      const mathLesson1 = await prisma.lesson.create({
        data: {
          title: book.grade === 1 ? 'B√†i 1: ƒê·∫øm t·ª´ 1 ƒë·∫øn 5' : 
                book.grade === 2 ? 'B√†i 1: S·ªë v√† ch·ªØ s·ªë trong ph·∫°m vi 20' :
                'B√†i 1: √în t·∫≠p ki·∫øn th·ª©c c≈©',
          description: book.grade === 1 ? 'H·ªçc c√°ch ƒë·∫øm v√† nh·∫≠n bi·∫øt c√°c s·ªë t·ª´ 1 ƒë·∫øn 5' :
                      book.grade === 2 ? '√în t·∫≠p v√† m·ªü r·ªông ki·∫øn th·ª©c v·ªÅ s·ªë' :
                      '√în t·∫≠p nh·ªØng ki·∫øn th·ª©c ƒë√£ h·ªçc',
          order: 1,
          chapterId: chapter1.id,
          bookId: book.id,
        },
      });
      lessons.push(mathLesson1);

      const mathLesson2 = await prisma.lesson.create({
        data: {
          title: book.grade === 1 ? 'B√†i 2: ƒê·∫øm t·ª´ 6 ƒë·∫øn 10' :
                book.grade === 2 ? 'B√†i 2: Ph√©p c·ªông kh√¥ng nh·ªõ' :
                'B√†i 2: Ki·∫øn th·ª©c m·ªõi',
          description: book.grade === 1 ? 'M·ªü r·ªông kh·∫£ nƒÉng ƒë·∫øm t·ª´ 6 ƒë·∫øn 10' :
                      book.grade === 2 ? 'Th·ª±c hi·ªán ph√©p c·ªông trong ph·∫°m vi 20' :
                      'H·ªçc c√°c ki·∫øn th·ª©c m·ªõi',
          order: 2,
          chapterId: chapter1.id,
          bookId: book.id,
        },
      });
      lessons.push(mathLesson2);
    } else if (book.subject === 'Ti·∫øng Vi·ªát') {
      // Vietnamese lessons
      const vnLesson1 = await prisma.lesson.create({
        data: {
          title: 'B√†i 1: Ch·ªØ c√°i ƒë·∫ßu ti√™n',
          description: 'H·ªçc c√°c ch·ªØ c√°i ƒë·∫ßu ti√™n trong b·∫£ng ch·ªØ c√°i',
          order: 1,
          chapterId: chapter1.id,
          bookId: book.id,
        },
      });
      lessons.push(vnLesson1);
    } else if (book.subject === 'Th·∫ø gi·ªõi ƒë·ªông v·∫≠t') {
      // Animal World lessons
      const animalLesson1 = await prisma.lesson.create({
        data: {
          title: 'B√†i 1: Nh·ªØng con v·∫≠t g·∫ßn g≈©i',
          description: 'L√†m quen v·ªõi c√°c con v·∫≠t th∆∞·ªùng g·∫∑p xung quanh ch√∫ng ta nh∆∞ ch√≥, m√®o, g√†, v·ªãt',
          order: 1,
          chapterId: chapter1.id,
          bookId: book.id,
        },
      });
      lessons.push(animalLesson1);

      const animalLesson2 = await prisma.lesson.create({
        data: {
          title: 'B√†i 2: ƒê·ªông v·∫≠t trong r·ª´ng',
          description: 'Kh√°m ph√° nh·ªØng con v·∫≠t s·ªëng trong r·ª´ng nh∆∞ th·ªè, s√≥c, h·ªï, voi',
          order: 2,
          chapterId: chapter1.id,
          bookId: book.id,
        },
      });
      lessons.push(animalLesson2);
    } else if (book.subject === 'ƒê·∫°o ƒë·ª©c') {
      // Moral Education lessons
      const moralLesson1 = await prisma.lesson.create({
        data: {
          title: 'B√†i 1: Em y√™u gia ƒë√¨nh',
          description: 'Gi√∫p c√°c em hi·ªÉu v·ªÅ t√¨nh y√™u th∆∞∆°ng gia ƒë√¨nh, bi·∫øt k√≠nh tr·ªçng v√† y√™u qu√Ω cha m·∫π, √¥ng b√†',
          order: 1,
          chapterId: chapter1.id,
          bookId: book.id,
        },
      });
      lessons.push(moralLesson1);

      const moralLesson2 = await prisma.lesson.create({
        data: {
          title: 'B√†i 2: Em y√™u tr∆∞·ªùng l·ªõp',
          description: 'Gi√∫p c√°c em bi·∫øt y√™u qu√Ω th·∫ßy c√¥, b·∫°n b√® v√† tr∆∞·ªùng l·ªõp, c√≥ √Ω th·ª©c gi·ªØ g√¨n v·ªá sinh',
          order: 2,
          chapterId: chapter1.id,
          bookId: book.id,
        },
      });
      lessons.push(moralLesson2);

      const moralLesson3 = await prisma.lesson.create({
        data: {
          title: 'B√†i 3: Em bi·∫øt ch√†o h·ªèi',
          description: 'D·∫°y c√°c em c√°ch ch√†o h·ªèi l·ªãch s·ª±, bi·∫øt n√≥i l·ªùi c·∫£m ∆°n v√† xin l·ªói khi c·∫ßn thi·∫øt',
          order: 3,
          chapterId: chapter2.id,
          bookId: book.id,
        },
      });
      lessons.push(moralLesson3);

      const moralLesson4 = await prisma.lesson.create({
        data: {
          title: 'B√†i 4: Em bi·∫øt gi√∫p ƒë·ª° b·∫°n b√®',
          description: 'Gi√∫p c√°c em hi·ªÉu t·∫ßm quan tr·ªçng c·ªßa vi·ªác gi√∫p ƒë·ª° l·∫´n nhau, chia s·∫ª v√† quan t√¢m ƒë·∫øn b·∫°n b√®',
          order: 4,
          chapterId: chapter2.id,
          bookId: book.id,
        },
      });
      lessons.push(moralLesson4);

      const moralLesson5 = await prisma.lesson.create({
        data: {
          title: 'B√†i 5: Em bi·∫øt gi·ªØ g√¨n ƒë·ªì ch∆°i',
          description: 'D·∫°y c√°c em c√°ch b·∫£o qu·∫£n ƒë·ªì ch∆°i, s√°ch v·ªü v√† ƒë·ªì d√πng h·ªçc t·∫≠p',
          order: 5,
          chapterId: chapter2.id,
          bookId: book.id,
        },
      });
      lessons.push(moralLesson5);
    }
  }

  // Create Pages and PageBlocks for each lesson
  console.log('üìÑ Creating pages and page blocks...');
  const pageBlocks = [];
  let moralEducationImageIndex = 0; // Track which image to use next
  
  for (const lesson of lessons) {
    // Determine if this is a moral education lesson to assign images
    const isMoralEducation = lesson.title.includes('Em y√™u gia ƒë√¨nh') || 
                             lesson.title.includes('Em y√™u tr∆∞·ªùng l·ªõp') || 
                             lesson.title.includes('Em bi·∫øt ch√†o h·ªèi') || 
                             lesson.title.includes('Em bi·∫øt gi√∫p ƒë·ª°') || 
                             lesson.title.includes('Em bi·∫øt gi·ªØ g√¨n');

    // Create pages for each lesson
    const introPage = await prisma.page.create({
      data: {
        lessonId: lesson.id,
        order: 1,
        title: 'Trang gi·ªõi thi·ªáu',
        layout: 'one-column',
        imageUrl: isMoralEducation && moralEducationImageIndex < moralEducationImageUrls.length 
          ? moralEducationImageUrls[moralEducationImageIndex++] 
          : undefined
      }
    });

    const contentPage = await prisma.page.create({
      data: {
        lessonId: lesson.id,
        order: 2,
        title: 'Trang n·ªôi dung ch√≠nh',
        layout: 'two-column',
        imageUrl: isMoralEducation && moralEducationImageIndex < moralEducationImageUrls.length 
          ? moralEducationImageUrls[moralEducationImageIndex++] 
          : undefined
      }
    });

    const practePage = await prisma.page.create({
      data: {
        lessonId: lesson.id,
        order: 3,
        title: 'Trang th·ª±c h√†nh',
        layout: 'one-column',
        imageUrl: isMoralEducation && moralEducationImageIndex < moralEducationImageUrls.length 
          ? moralEducationImageUrls[moralEducationImageIndex++] 
          : undefined
      }
    });

    // Create page blocks for intro page
    const textBlock1 = await prisma.pageBlock.create({
      data: {
        pageId: introPage.id,
        order: 1,
        blockType: PageBlockType.TEXT,
        contentJson: {
          markdown: `# ${lesson.title}\n\n${lesson.description}\n\nTrong b√†i h·ªçc n√†y, c√°c em s·∫Ω h·ªçc ƒë∆∞·ª£c nh·ªØng ki·∫øn th·ª©c quan tr·ªçng v√† th√∫ v·ªã. H√£y c√πng b·∫Øt ƒë·∫ßu nh√©!`
        },
        x: 50,      // T·ªça ƒë·ªô X - v·ªã tr√≠ t·ª´ tr√°i sang ph·∫£i (pixel)
        y: 100,     // T·ªça ƒë·ªô Y - v·ªã tr√≠ t·ª´ tr√™n xu·ªëng d∆∞·ªõi (pixel)
        width: 700, // Chi·ªÅu r·ªông block
        height: 200 // Chi·ªÅu cao block
      }
    });
    pageBlocks.push(textBlock1);

    // Create page blocks for content page
    const imageBlock = await prisma.pageBlock.create({
      data: {
        pageId: contentPage.id,
        order: 1,
        blockType: PageBlockType.IMAGE,
        contentJson: {
          imageUrl: 'https://via.placeholder.com/400x300',
          alt: 'H√¨nh minh h·ªça b√†i h·ªçc',
          caption: 'H√¨nh minh h·ªça cho b√†i h·ªçc'
        },
        x: 50,      // C·ªôt tr√°i trong layout two-column
        y: 50,      
        width: 350, 
        height: 250
      }
    });
    pageBlocks.push(imageBlock);

    const textBlock2 = await prisma.pageBlock.create({
      data: {
        pageId: contentPage.id,
        order: 2,
        blockType: PageBlockType.TEXT,
        contentJson: {
          markdown: `## N·ªôi dung b√†i h·ªçc\n\nƒê√¢y l√† n·ªôi dung chi ti·∫øt c·ªßa b√†i h·ªçc...`
        },
        x: 450,     // C·ªôt ph·∫£i trong layout two-column
        y: 50,      
        width: 350, 
        height: 300
      }
    });
    pageBlocks.push(textBlock2);

    // Create H5P block for practice page (if relevant H5P content exists)
    let relevantH5P;
    
    // Find appropriate H5P content based on lesson subject
    if (lesson.title.includes('con v·∫≠t')) {
      relevantH5P = h5pContents.find(content => 
        content.metadata && 
        JSON.parse(JSON.stringify(content.metadata)).subject === 'Th·∫ø gi·ªõi ƒë·ªông v·∫≠t'
      );
    } else if (lesson.title.includes('To√°n') || lesson.title.includes('ƒê·∫øm') || lesson.title.includes('s·ªë')) {
      relevantH5P = h5pContents.find(content => 
        content.metadata && 
        JSON.parse(JSON.stringify(content.metadata)).subject === 'To√°n'
      );
    } else if (lesson.title.includes('ch·ªØ c√°i')) {
      relevantH5P = h5pContents.find(content => 
        content.metadata && 
        JSON.parse(JSON.stringify(content.metadata)).subject === 'Ti·∫øng Vi·ªát'
      );
    }

    if (relevantH5P) {
      const h5pBlock = await prisma.pageBlock.create({
        data: {
          pageId: practePage.id,
          order: 1,
          blockType: PageBlockType.H5P,
          h5pContentId: relevantH5P.id,
          x: 50,      // V·ªã tr√≠ trung t√¢m trang th·ª±c h√†nh
          y: 100,     
          width: 700, 
          height: 400
        }
      });
      pageBlocks.push(h5pBlock);
    } else {
      // Create a text block instead
      const practiceTextBlock = await prisma.pageBlock.create({
        data: {
          pageId: practePage.id,
          order: 1,
          blockType: PageBlockType.TEXT,
          contentJson: {
            markdown: `## B√†i t·∫≠p th·ª±c h√†nh\n\nC√°c em h√£y th·ª±c hi·ªán c√°c b√†i t·∫≠p ƒë·ªÉ luy·ªán t·∫≠p ki·∫øn th·ª©c ƒë√£ h·ªçc.`
          },
          x: 50,      // V·ªã tr√≠ trung t√¢m trang th·ª±c h√†nh
          y: 100,     
          width: 700, 
          height: 200
        }
      });
      pageBlocks.push(practiceTextBlock);
    }
  }

  // Create Student Progress
  console.log('üìä Creating student progress...');
  const studentProgress = [];
  
  for (let i = 0; i < allStudents.length; i++) {
    const student = allStudents[i];
    const gradeIndex = Math.floor(i / 5);
    
    // Get page blocks for the student's grade
    const studentPageBlocks = pageBlocks.filter(block => {
      // Find the page this block belongs to
      // This is a simplified approach - in real implementation, 
      // you'd need to traverse page -> lesson -> book -> class to check grade
      return Math.random() < 0.3; // Randomly assign some progress
    });

    // Create progress for some page blocks (simulate partial completion)
    for (let j = 0; j < Math.min(studentPageBlocks.length, 3); j++) {
      const block = studentPageBlocks[j];
      const status = j === 0 ? ProgressStatus.COMPLETED : 
                    j === 1 ? ProgressStatus.IN_PROGRESS : 
                    ProgressStatus.NOT_STARTED;
      
      const progress = await prisma.studentProgress.create({
        data: {
          userId: student.id,
          pageBlockId: block.id,
          status: status,
          completedAt: status === ProgressStatus.COMPLETED ? new Date() : null,
        },
      });
      studentProgress.push(progress);

      // Create quiz attempts for completed H5P blocks
      if (status === ProgressStatus.COMPLETED && block.blockType === PageBlockType.H5P) {
        await prisma.quizAttempt.create({
          data: {
            studentProgressId: progress.id,
            attemptNumber: 1,
            score: 80 + Math.random() * 20, // Random score between 80-100
            isPass: true,
            statement: {
              score: {
                scaled: 0.85
              }
            }
          },
        });
      }
    }
  }

  // Create sample tracking events
  console.log('üìà Creating tracking events...');
  const now = new Date();
  
  for (const student of allStudents.slice(0, 10)) { // Create events for first 10 students
    for (let i = 0; i < 5; i++) {
      const randomH5P = h5pContents[Math.floor(Math.random() * h5pContents.length)];
      
      await prisma.trackingEvent.create({
        data: {
          actorId: student.id,
          verb: 'completed',
          objectId: `h5p-${randomH5P.id}`,
          contentId: randomH5P.id,
          statement: {
            actor: {
              name: `${student.firstName} ${student.lastName}`,
              mbox: `mailto:${student.email}`
            },
            verb: {
              id: 'http://adlnet.gov/expapi/verbs/completed',
              display: { 'vi-VN': 'ho√†n th√†nh', 'en-US': 'completed' }
            },
            object: {
              id: randomH5P.id,
              definition: {
                name: { 'vi-VN': randomH5P.title },
                description: { 'vi-VN': 'B√†i t·∫≠p t∆∞∆°ng t√°c H5P' }
              }
            }
          },
          result: {
            score: {
              scaled: 0.8 + Math.random() * 0.2 // 80-100%
            },
            completion: true,
            success: true,
            duration: `PT${Math.floor(Math.random() * 10) + 5}M`
          },
          context: {
            platform: 'H·ªá th·ªëng h·ªçc t·∫≠p ti·ªÉu h·ªçc',
            language: 'vi-VN'
          },
          timestamp: new Date(now.getTime() - Math.random() * 7 * 24 * 60 * 60 * 1000), // Random time in last 7 days
        },
      });
    }
  }

  console.log('‚úÖ Vietnamese Elementary Education seed data created successfully!');
  console.log('\nüìä Summary:');
  console.log(`üë§ Users: ${1 + teachers.length + allStudents.length} (1 admin, ${teachers.length} teachers, ${allStudents.length} students)`);
  console.log(`üè´ Classes: ${classes.length} (Grades 1-5)`);
  console.log(`üìö Class Memberships: ${classMemberships.length}`);
  console.log(`üìñ Books: ${books.length} (Math, Vietnamese, Science, Animal World by grade)`);
  console.log(`üìö Lessons: ${lessons.length}`);
  console.log(`ÔøΩ Page Blocks: ${pageBlocks.length}`);
  console.log(`üéÆ H5P Content: ${h5pContents.length}`);
  console.log(`üìä Student Progress Records: ${studentProgress.length}`);
  
  console.log('\nüîê Login Credentials:');
  console.log('Admin: admin@truongtieuhoc.edu.vn / admin123');
  console.log('Teachers: ');
  console.log('  - co.linh@truongtieuhoc.edu.vn / giaovien123');
  console.log('  - thay.duc@truongtieuhoc.edu.vn / giaovien123');
  console.log('  - co.mai@truongtieuhoc.edu.vn / giaovien123');
  console.log('  - thay.son@truongtieuhoc.edu.vn / giaovien123');
  console.log('  - co.hoa@truongtieuhoc.edu.vn / giaovien123');
  console.log('Students (sample): ');
  console.log('  - minh.an.1@hocsinh.edu.vn / hocsinh123 (Grade 1)');
  console.log('  - van.phat.2@hocsinh.edu.vn / hocsinh123 (Grade 2)');
  console.log('  - thi.lan.3@hocsinh.edu.vn / hocsinh123 (Grade 3)');
  console.log('  - thi.quynh.4@hocsinh.edu.vn / hocsinh123 (Grade 4)');
  console.log('  - van.viet.5@hocsinh.edu.vn / hocsinh123 (Grade 5)');
  
  console.log('\nüéØ New Educational Structure:');
  console.log('üìö Each grade has Books for different subjects');
  console.log('üìñ Each Book has Chapters containing Lessons');
  console.log('ÔøΩ Each Lesson has Pages with multiple PageBlocks');
  console.log('üß± PageBlocks contain different content types (Text, Image, Video, H5P)');
  console.log('ÔøΩ Student progress is tracked at the PageBlock level');
  console.log('üéÆ H5P content provides interactive learning experiences');
  console.log('üèÜ Quiz attempts and xAPI events capture detailed learning analytics');
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });