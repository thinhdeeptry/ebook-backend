// ===============================================
// Prisma Schema cho Nền tảng SGK Điện Tử
// ===============================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===============================================
// User & Role
// ===============================================

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      Role     @default(STUDENT)
  isActive  Boolean  @default(true)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  classMemberships  ClassMembership[]
  studentProgress   StudentProgress[]
  uploadedH5p       H5PContent[]       @relation("H5PUploader")
  trackingEvents    TrackingEvent[]    @relation("TrackingActor")
  uploadedLibraries H5PLibrary[]       @relation("H5PLibraryUploader")
  tempFiles         H5PTemporaryFile[] @relation("H5PTemporaryFileUploader")
  xapiStatements    XApiStatement[]    @relation("XApiActor")

  @@map("users")
}

// ===============================================
// Classes (Lớp học) & Enrollments
// ===============================================

model Class {
  id          String   @id @default(cuid())
  name        String
  gradeLevel  Int      @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  memberships ClassMembership[]
  books       Book[]  @relation("BookClasses")

  @@map("classes")
}

model ClassMembership {
  id       String   @id @default(cuid())
  userId   String
  classId  String
  joinedAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([userId, classId])
  @@map("class_memberships")
}

// ===============================================
// BOOK STRUCTURE (Book → Chapter → Lesson → Page → PageBlock)
// ===============================================

model Book {
  id           String   @id @default(cuid())
  title        String
  subject      String
  grade        Int
  description  String?
  coverImage   String?
  publisher    String?
  isPublished  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  chapters Chapter[]
  lessons  Lesson[]
  classes  Class[] @relation("BookClasses")

  @@map("books")
}

model Chapter {
  id          String   @id @default(cuid())
  title       String
  order       Int
  bookId      String
  description String?

  book    Book    @relation(fields: [bookId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@map("chapters")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  chapterId   String?
  bookId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  chapter Chapter? @relation(fields: [chapterId], references: [id], onDelete: SetNull)
  book    Book?    @relation(fields: [bookId], references: [id], onDelete: SetNull)
  pages   Page[]

  @@map("lessons")
}
enum PageType {
  THEORY    // trang thuần lý thuyết
  INTERACTIVE // trang chứa tương tác H5P / media
}
model Page {
  id        String   @id @default(cuid())
  lessonId  String
  order     Int
  title     String?
  imageUrl    String?  // URL hình ảnh bài học (có thể là ảnh chụp từ sách giáo khoa)
  layout    String? // one-column, two-column, etc.
  type      PageType  @default(THEORY)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  blocks PageBlock[]

  @@map("pages")
}

enum PageBlockType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  H5P
}

model PageBlock {
  id           String        @id @default(cuid())
  pageId       String
  order        Int
  blockType    PageBlockType
  contentJson  Json?
  h5pContentId String?
  xPercent     Float?        // Tọa độ X theo phần trăm (0-100)
  yPercent     Float?        // Tọa độ Y theo phần trăm (0-100)
  widthPercent Float?        // Chiều rộng theo phần trăm (0-100)
  heightPercent Float?       // Chiều cao theo phần trăm (0-100)

  page       Page       @relation(fields: [pageId], references: [id], onDelete: Cascade)
  h5pContent H5PContent? @relation(fields: [h5pContentId], references: [id], onDelete: SetNull)
  progress   StudentProgress[]
  quizConfig QuizConfig?

  @@map("page_blocks")
}

// ===============================================
// STUDENT PROGRESS TRACKING
// ===============================================

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model StudentProgress {
  id           String         @id @default(cuid())
  userId       String
  pageBlockId  String
  status       ProgressStatus @default(NOT_STARTED)
  completedAt  DateTime?
  lastAccessed DateTime       @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  pageBlock   PageBlock   @relation(fields: [pageBlockId], references: [id], onDelete: Cascade)
  quizAttempts QuizAttempt[]

  @@unique([userId, pageBlockId])
  @@map("student_progress")
}

model QuizAttempt {
  id                String   @id @default(cuid())
  studentProgressId String
  attemptNumber     Int
  score             Float?
  maxScore          Float?
  isPass            Boolean
  statement         Json?
  submittedAt       DateTime @default(now())
  duration          Int?     // Thời gian làm bài (giây)
  
  studentProgress   StudentProgress @relation(fields: [studentProgressId], references: [id], onDelete: Cascade)
  xapiStatements    XApiStatement[]
  questionResponses QuestionResponse[]

  @@map("quiz_attempts")
}

// ===============================================
// QUIZ/EXERCISE CONFIGURATION
// ===============================================

model QuizConfig {
  id              String   @id @default(cuid())
  pageBlockId     String   @unique
  title           String?
  description     String?
  passingScore    Float    @default(70) // Điểm đạt yêu cầu (%)
  weight          Float    @default(1.0) // Trọng số của bài tập
  maxAttempts     Int?     // Số lần làm tối đa (null = không giới hạn)
  timeLimit       Int?     // Giới hạn thời gian (phút)
  shuffleQuestions Boolean @default(false)
  showFeedback    Boolean  @default(true)
  showCorrectAnswers Boolean @default(true)
  allowReview     Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  pageBlock       PageBlock @relation(fields: [pageBlockId], references: [id], onDelete: Cascade)
  questions       QuizQuestion[]

  @@map("quiz_configs")
}

model QuizQuestion {
  id            String   @id @default(cuid())
  quizConfigId  String
  questionText  String
  questionType  String   // multiple-choice, true-false, fill-blank, etc.
  order         Int
  points        Float    @default(1.0)
  h5pContentId  String?  // Link đến H5P content nếu có
  metadata      Json?    // Lưu thêm thông tin câu hỏi
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  quizConfig    QuizConfig @relation(fields: [quizConfigId], references: [id], onDelete: Cascade)
  h5pContent    H5PContent? @relation(fields: [h5pContentId], references: [id], onDelete: SetNull)
  responses     QuestionResponse[]

  @@map("quiz_questions")
}

model QuestionResponse {
  id              String   @id @default(cuid())
  quizAttemptId   String
  questionId      String
  userAnswer      Json     // Câu trả lời của học sinh
  isCorrect       Boolean
  pointsEarned    Float
  timeSpent       Int?     // Thời gian làm câu này (giây)
  submittedAt     DateTime @default(now())

  quizAttempt     QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  question        QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("question_responses")
}

// ===============================================
// xAPI TRACKING (Experience API Standard)
// ===============================================

model XApiStatement {
  id              String   @id @default(cuid())
  statementId     String   @unique // UUID theo chuẩn xAPI
  actorId         String   // User thực hiện hành động
  verbId          String   // Hành động (completed, attempted, answered, etc.)
  objectId        String   // Đối tượng (quiz, question, content)
  objectType      String   // Activity, Agent, etc.
  resultScore     Float?   // Điểm số
  resultScoreMin  Float?
  resultScoreMax  Float?
  resultSuccess   Boolean?
  resultCompletion Boolean?
  resultDuration  String?  // ISO 8601 duration
  resultResponse  Json?    // Câu trả lời chi tiết
  contextJson     Json?    // Context theo chuẩn xAPI
  timestamp       DateTime @default(now())
  stored          DateTime @default(now())
  authority       Json?    // Thông tin về hệ thống ghi nhận
  version         String   @default("1.0.3") // xAPI version
  attachments     Json?    // Attachments nếu có
  
  // Relations
  quizAttemptId   String?
  h5pContentId    String?
  pageBlockId     String?

  actor           User @relation("XApiActor", fields: [actorId], references: [id], onDelete: Cascade)
  verb            XApiVerb @relation(fields: [verbId], references: [id])
  quizAttempt     QuizAttempt? @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
  h5pContent      H5PContent? @relation("XApiH5PTracking", fields: [h5pContentId], references: [id], onDelete: SetNull)

  @@index([actorId, timestamp])
  @@index([verbId])
  @@index([objectId])
  @@map("xapi_statements")
}

model XApiVerb {
  id          String   @id @default(cuid())
  verbIri     String   @unique // IRI theo chuẩn xAPI (e.g., http://adlnet.gov/expapi/verbs/completed)
  display     Json     // Display name trong nhiều ngôn ngữ
  
  statements  XApiStatement[]

  @@map("xapi_verbs")
}

// ===============================================
// QUIZ ANALYTICS & REPORTING
// ===============================================

model QuizAnalytics {
  id                String   @id @default(cuid())
  pageBlockId       String
  userId            String?  // null = analytics cho toàn bộ
  totalAttempts     Int      @default(0)
  averageScore      Float?
  highestScore      Float?
  lowestScore       Float?
  passRate          Float?   // Tỷ lệ đạt (%)
  averageTimeSpent  Int?     // Thời gian trung bình (giây)
  lastCalculated    DateTime @default(now())
  
  @@unique([pageBlockId, userId])
  @@map("quiz_analytics")
}

// ===============================================
// H5P CONTENT & TRACKING
// ===============================================

model H5PContent {
  id         String   @id @default(cuid())
  title      String
  library    String
  params     Json
  metadata   Json?
  filePath   String?
  uploaderId String
  isPublic   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  uploader       User            @relation("H5PUploader", fields: [uploaderId], references: [id], onDelete: Cascade)
  trackingEvents TrackingEvent[] @relation("H5PTracking")
  pageBlocks     PageBlock[]     // Link từ các block SGK
  quizQuestions  QuizQuestion[]
  xapiStatements XApiStatement[] @relation("XApiH5PTracking")

  @@map("h5p_contents")
}

model TrackingEvent {
  id        String   @id @default(cuid())
  actorId   String
  verb      String
  objectId  String
  contentId String?
  statement Json
  result    Json?
  context   Json?
  timestamp DateTime @default(now())

  actor   User        @relation("TrackingActor", fields: [actorId], references: [id], onDelete: Cascade)
  content H5PContent? @relation("H5PTracking", fields: [contentId], references: [id], onDelete: SetNull)

  @@map("tracking_events")
}

model H5PLibrary {
  id            String   @id @default(cuid())
  machineName   String
  majorVersion  Int
  minorVersion  Int
  patchVersion  Int
  title         String
  description   String?
  author        String?
  license       String?
  libraryJson   Json
  semanticsJson Json?
  languageJson  Json?
  files         Json?
  dependencies  Json?
  isPublic      Boolean  @default(true)
  uploaderId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  uploader User? @relation("H5PLibraryUploader", fields: [uploaderId], references: [id], onDelete: SetNull)

  @@unique([machineName, majorVersion, minorVersion, patchVersion])
  @@map("h5p_libraries")
}

model H5PContentLibrary {
  id             String @id @default(cuid())
  contentId      String
  libraryId      String
  dependencyType String // preloaded, dynamic, editor

  @@unique([contentId, libraryId, dependencyType])
  @@map("h5p_content_libraries")
}

model H5PTemporaryFile {
  id        String   @id @default(cuid())
  filename  String
  path      String
  size      BigInt
  mimetype  String
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation("H5PTemporaryFileUploader", fields: [userId], references: [id], onDelete: Cascade)

  @@map("h5p_temporary_files")
}
