// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      Role     @default(STUDENT)
  isActive  Boolean  @default(true)
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  classMemberships  ClassMembership[] // Mối quan hệ với các lớp học
  studentProgress   StudentProgress[] // Toàn bộ tiến độ học tập
  uploadedH5p       H5PContent[]       @relation("H5PUploader")
  trackingEvents    TrackingEvent[]    @relation("TrackingActor")
  uploadedLibraries H5PLibrary[]       @relation("H5PLibraryUploader")
  tempFiles         H5PTemporaryFile[] @relation("H5PTemporaryFileUploader")

  @@map("users")
}

// MỚI: Model cho các khối lớp (Lớp 1, Lớp 2...)
model Class {
  id          String   @id @default(cuid())
  name        String // Ví dụ: "Lớp 1", "Lớp 2"
  gradeLevel  Int      @unique // Số 1, 2, 3... để sort
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  memberships ClassMembership[]
  courses     Course[]

  @@map("classes")
}

// MỚI: Bảng ghi danh học sinh vào lớp
model ClassMembership {
  id       String   @id @default(cuid())
  userId   String
  classId  String
  joinedAt DateTime @default(now())

  // Relationships
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([userId, classId])
  @@map("class_memberships")
}

// ===============================================
// Course and Lesson Structure
// ===============================================

// CHỈNH SỬA: Khóa học giờ thuộc về một Class
model Course {
  id           String   @id @default(cuid())
  title        String // Ví dụ: "Toán Lớp 1"
  description  String?
  thumbnailUrl String?
  isPublished  Boolean  @default(false)
  classId      String   @default("123") // Liên kết với lớp học
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  class   Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@map("courses")
}

// MỚI: Model cho từng bài học trong một khóa học
model Lesson {
  id          String   @id @default(cuid())
  title       String // Ví dụ: "Bài 1: Phép cộng trong phạm vi 10"
  description String?
  order       Int // Thứ tự của bài học trong khóa học
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  course Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  steps  LessonStep[]

  @@map("lessons")
}

// MỚI: Enum cho các loại nội dung trong một bài học
enum LessonStepType {
  TEXT
  VIDEO
  H5P
}

// MỚI: Model cho từng bước/hoạt động trong một bài học
model LessonStep {
  id           String         @id @default(cuid())
  title        String
  order        Int // Thứ tự của bước trong bài học
  contentType  LessonStepType // Loại nội dung: TEXT, VIDEO, hoặc H5P
  contentJson  Json? // Nội dung cho TEXT (markdown) hoặc VIDEO (url, etc.)
  lessonId     String
  h5pContentId String? // Liên kết trực tiếp nếu là H5P

  // Relationships
  lesson          Lesson            @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  h5pContent      H5PContent?       @relation(fields: [h5pContentId], references: [id], onDelete: SetNull)
  studentProgress StudentProgress[]

  @@map("lesson_steps")
}

// ===============================================
// Student Progress Tracking
// ===============================================

// MỚI: Enum cho trạng thái tiến độ
enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

// MỚI: Theo dõi trạng thái hoàn thành của học sinh trên từng LessonStep
model StudentProgress {
  id           String         @id @default(cuid())
  userId       String
  lessonStepId String
  status       ProgressStatus @default(NOT_STARTED)
  completedAt  DateTime?
  lastAccessed DateTime       @updatedAt

  // Relationships
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonStep   LessonStep    @relation(fields: [lessonStepId], references: [id], onDelete: Cascade)
  quizAttempts QuizAttempt[] // Lịch sử các lần làm quiz cho bước này

  @@unique([userId, lessonStepId])
  @@map("student_progress")
}

// MỚI: Ghi lại mỗi lần học sinh làm quiz
model QuizAttempt {
  id                String   @id @default(cuid())
  studentProgressId String
  attemptNumber     Int
  score             Float? // Điểm số đạt được
  isPass            Boolean // Đạt hay không đạt
  statement         Json? // Có thể lưu xAPI statement cuối cùng của lần làm bài
  submittedAt       DateTime @default(now())

  // Relationships
  studentProgress StudentProgress @relation(fields: [studentProgressId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

// ===============================================
// H5P and Other Models (Chỉnh sửa nhẹ)
// ===============================================

model H5PContent {
  id         String   @id @default(cuid())
  title      String
  library    String
  params     Json
  metadata   Json?
  filePath   String?
  uploaderId String
  isPublic   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  uploader       User            @relation("H5PUploader", fields: [uploaderId], references: [id], onDelete: Cascade)
  trackingEvents TrackingEvent[] @relation("H5PTracking")
  lessonSteps    LessonStep[] // Mối quan hệ ngược lại với LessonStep

  @@map("h5p_contents")
}

model TrackingEvent {
  id        String   @id @default(cuid())
  actorId   String
  verb      String
  objectId  String
  contentId String?
  statement Json
  result    Json?
  context   Json?
  timestamp DateTime @default(now())

  // Relationships
  actor   User        @relation("TrackingActor", fields: [actorId], references: [id], onDelete: Cascade)
  content H5PContent? @relation("H5PTracking", fields: [contentId], references: [id], onDelete: SetNull)

  @@map("tracking_events")
}

model H5PLibrary {
  id            String   @id @default(cuid())
  machineName   String // Library machine name (e.g., "H5P.InteractiveVideo")
  majorVersion  Int // Major version
  minorVersion  Int // Minor version
  patchVersion  Int // Patch version
  title         String // Human-readable title
  description   String? // Library description
  author        String? // Library author
  license       String? // License type
  libraryJson   Json // Complete library.json content
  semanticsJson Json? // Semantics definition
  languageJson  Json? // Language files
  files         Json? // Associated files (CSS, JS, etc.)
  dependencies  Json? // Library dependencies
  isPublic      Boolean  @default(true)
  uploaderId    String? // User who uploaded custom library
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  uploader User? @relation("H5PLibraryUploader", fields: [uploaderId], references: [id], onDelete: SetNull)

  @@unique([machineName, majorVersion, minorVersion, patchVersion])
  @@map("h5p_libraries")
}

model H5PContentLibrary {
  id             String @id @default(cuid())
  contentId      String // References H5PContent.id
  libraryId      String // References H5PLibrary.id  
  dependencyType String // "preloaded", "dynamic", "editor"

  @@unique([contentId, libraryId, dependencyType])
  @@map("h5p_content_libraries")
}

model H5PTemporaryFile {
  id        String   @id @default(cuid())
  filename  String // Original filename
  path      String // File path on disk
  size      BigInt // File size in bytes
  mimetype  String // MIME type
  userId    String // User who uploaded the file
  createdAt DateTime @default(now())
  expiresAt DateTime // When the file should be deleted

  // Relationships
  user User @relation("H5PTemporaryFileUploader", fields: [userId], references: [id], onDelete: Cascade)

  @@map("h5p_temporary_files")
}
